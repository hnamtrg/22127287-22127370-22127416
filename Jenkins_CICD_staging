pipeline {
    agent { label 'k8s-agent' }

    parameters {
        string(name: 'tag_name', defaultValue: '', description: 'Git tag from webhook')
    }

    environment {
        NAMESPACE = "staging"
        DOCKER_REGISTRY = 'chitaialm/petclinic'
        APP_NAME = "petclinic-${NAMESPACE}"
        VALUES_FILE = "petclinic-chart/values.yaml"
        APPLICATION_FILE = "application.yaml"
        COMMIT = "${params.tag_name?.trim()}" 
    }

    stages {
        stage('Validate Tag') {
            steps {
                script {
                    def GIT_TAG = params.tag_name?.trim()
                    echo "Webhook tag_name: ${params.tag_name}"
                    echo "GIT_TAG: ${GIT_TAG}"
                    if (!GIT_TAG) {
                        error "No tag provided. This job only runs for tag pushes."
                    }
                }
            }
        }

        stage('Checkout Repository') {
            steps {
                script {
                    def GIT_TAG = params.tag_name?.trim()
                    sh "git fetch --all"
                    sh "git tag -l"
                    sh "git checkout tags/${GIT_TAG}"
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    def serviceMap = [
                        'config-server': '8888',
                        'discovery-server': '8761',
                        'customers-service': '8081',
                        'visits-service': '8082',
                        'vets-service': '8083',
                        'genai-service': '8084',
                        'api-gateway': '8080',
                        'admin-server': '9090'
                    ]

                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    }

                    serviceMap.each { service, port ->
                        def imageName = "${DOCKER_REGISTRY}:spring-petclinic-${service}-${params.tag_name}"
                        echo "Building Docker image for ${service} → ${imageName}"

                        sh """
                            docker build \
                              --build-arg SERVICE_NAME=spring-petclinic-${service} \
                              --build-arg SERVICE_PORT=${port} \
                              -t ${imageName} .
                        """
                        sh "docker push ${imageName}"
                    }

                    sh "docker logout"
                }
            }
        }

        stage('Checkout to Staging') {
            steps {
                script {
                    sh """
                        git fetch origin
                        git checkout staging
                        git reset --hard origin/staging
                        git clean -fd
                    """
                }
            }
        }

        stage('Update values.yaml with Commit Tag') {
            steps {
                script {
                    def tag = params.tag_name?.trim()
                    def file = "${VALUES_FILE}"
                    def services = [
                        'config-server',
                        'customers-service',
                        'discovery-server',
                        'visits-service',
                        'vets-service',
                        'genai-service',
                        'api-gateway',
                        'admin-server'
                    ]

                    services.each { svc ->
                        sh """
                            sed -i "/^  ${svc}:/,/^[^[:space:]]/s/^[[:space:]]*commit: .*/    commit: \\"${tag}\\"/" ${VALUES_FILE}
                        """
                    }
                    echo "Updated commit tags to: ${tag}"
                    sh "cat ${file}"
                }
            }
        }
    
        stage('Commit and Push to Staging') {
            steps {
                script {
                    def tag = params.tag_name?.trim()
                    
                    // Sử dụng GitHub token để đăng nhập vào git
                    withCredentials([usernamePassword(credentialsId: 'token-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        sh """
                            git config user.email "lamchitaia1@gmail.com"
                            git config user.name "Taihoclaptrinh"
                            git add ${VALUES_FILE}
                            git commit -m "chore: update commit tag to ${tag} [skip ci]" || echo "No changes to commit"
                            
                            # Đặt lại remote URL với GitHub token
                            git remote set-url origin https://${GIT_USER}:${GIT_PASS}@github.com/Taihoclaptrinh/testtt.git
                            
                            # Push code lên branch staging
                            git push origin staging
                        """
                    }
                }
            }
        }

    }
}
